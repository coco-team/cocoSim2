%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This file is part of CoCoSim.
% Copyright (C) 2014-2016  Carnegie Mellon University
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
classdef XML_Trace < handle

	properties
		traceDOM;
		model_full_path;
		xml_file_path;
		traceRootNode;
		current_node;
		current_inputs;
		current_outputs;
		current_variables;
	end

	methods

		function obj = XML_Trace(model_full_path, trace_file_name)
			obj.traceDOM = com.mathworks.xml.XMLUtils.createDocument('CoCoSimTrace');
			[path file ext] = fileparts(model_full_path);
			if strcmp(path, '')
				absolute_path = './';
			else
				absolute_path = cd(cd(path));
			end
			absolute_file_path = fullfile(absolute_path, strcat(file, ext));
			obj.model_full_path = absolute_file_path;
			obj.xml_file_path = trace_file_name;
		end

		function init(obj)
			obj.traceRootNode = obj.traceDOM.getDocumentElement;
			obj.traceRootNode.setAttribute('model_file', obj.model_full_path);
			comment = obj.traceDOM.createComment('This file has been generated by the CoCoSim tool');
			obj.traceRootNode.appendChild(comment);
		end

		function write(obj)
			xmlwrite(obj.xml_file_path, obj.traceDOM);
		end

	% Nodes management
		function element = create_Node_Element(obj, block_origin_name, node_name)
			element = obj.traceDOM.createElement('Node');
			element.setAttribute('node_name', node_name);
			element.setAttribute('block_name', block_origin_name);
			obj.traceRootNode.appendChild(element);
			obj.current_node = element;
		end

	% Inputs management
		function element = create_Inputs_Element(obj)
			element = obj.traceDOM.createElement('InputList');
			obj.current_node.appendChild(element);
			obj.current_inputs = element;
		end

		function element = add_Input(obj, var_name, block, port, dim)
			element = obj.create_Data_Trace_Element('Input', var_name, block, port, dim, false);
			obj.current_inputs.appendChild(element);
		end

	% Outputs management
		function element = create_Outputs_Element(obj)
			element = obj.traceDOM.createElement('OutputList');
			obj.current_node.appendChild(element);
			obj.current_outputs = element;
		end

		function element = add_Output(obj, var_name, block, port, dim)
			element = obj.create_Data_Trace_Element('Output', var_name, block, port, dim, false);
			obj.current_outputs.appendChild(element);
		end
	
	% Variables management
		function element = create_Variables_Element(obj)
			element = obj.traceDOM.createElement('VarList');
			obj.current_node.appendChild(element);
			obj.current_variables = element;
		end

		function element = add_Variable(obj, var_name, block, port, dim, is_temp)
			element = obj.create_Data_Trace_Element('Variable', var_name, block, port, dim, is_temp);
			obj.current_variables.appendChild(element);
		end

	% Generic functions
		function element = create_Data_Trace_Element(obj, node_name, var_name, block, port, dim, is_temp)
			element = obj.traceDOM.createElement(node_name);
			element.setAttribute('variable', var_name);
			element.appendChild(obj.create_Text_Node('block_name', block));
			if strcmp(node_name, 'Input') || strcmp(node_name, 'Variable')
				element.appendChild(obj.create_Text_Node('out_port_nb', num2str(port)));
			else
				element.appendChild(obj.create_Text_Node('in_port_nb', num2str(port)));
			end
			element.appendChild(obj.create_Text_Node('dimension', num2str(dim)));
			if is_temp
				element.setAttribute('is_temporary', 'True');
			end
		end

		function element = create_Text_Node(obj, node_name, text_content)
			element = obj.traceDOM.createElement(node_name);
			element.appendChild(obj.traceDOM.createTextNode(text_content));
		end

	% Trace querying
		function var_names = get_in_variable_name(obj, subsystem, block_name, dim)
			var_names = '';
			nodes = obj.traceRootNode.getElementsByTagName('Node');
			for idx_node=0:nodes.getLength-1
				block_name_node = nodes.item(idx_node).getAttribute('block_name');
				if strcmp(block_name_node, subsystem.Origin_path)
					inputs = nodes.item(idx_node).getElementsByTagName('Input');
					for idx_input=0:inputs.getLength-1
						input = inputs.item(idx_input);
						block_name_elem = input.getElementsByTagName('block_name');
						block_name_input = block_name_elem.item(0).getFirstChild.getData;
						tmp = regexp(char(block_name_input), '/', 'split');
						if strcmp(block_name, tmp(end))
							var_names{numel(var_names) + 1} = char(input.getAttribute('variable'));
						end
					end
				end
			end
        end

        function block_name = get_block_name_from_variable_sf(obj, node_name, subsys_origin_name, var_name)
            block_name = '';
            expr = '\w*(_c|_x)$';
            cex_var_name = '';
            if numel(regexp(var_name,expr,'match')) == 0;
                c = strsplit(var_name, '.');
                cex_var_name = c{end};
            end
			nodes = obj.traceRootNode.getElementsByTagName('Node');
			for idx_node=0:nodes.getLength-1
				block_name_node = nodes.item(idx_node).getAttribute('block_name');
				if strcmp(block_name_node, subsys_origin_name)
					inputs = nodes.item(idx_node).getElementsByTagName('Input');
					for idx_input=0:inputs.getLength-1
						input = inputs.item(idx_input);
						if strcmp(input.getAttribute('variable'), cex_var_name)
							block = input.getElementsByTagName('block_name');
							block_name = char(block.item(0).getFirstChild.getData);
							return;
						end
					end
					outputs = nodes.item(idx_node).getElementsByTagName('Output');
					for idx_output=0:outputs.getLength-1
						output = outputs.item(idx_output);
						if strcmp(output.getAttribute('variable'), cex_var_name)
							block = output.getElementsByTagName('block_name');
							block_name = char(block.item(0).getFirstChild.getData);
							return;
						end
					end
				end
			end
        end
        
		function block_name = get_block_name_from_variable(obj, subsys_origin_name, var_name)

            block_name = '';
			nodes = obj.traceRootNode.getElementsByTagName('Node');
			for idx_node=0:nodes.getLength-1
				block_name_node = nodes.item(idx_node).getAttribute('block_name');
				if strcmp(block_name_node, subsys_origin_name)
					inputs = nodes.item(idx_node).getElementsByTagName('Input');
					for idx_input=0:inputs.getLength-1
						input = inputs.item(idx_input);
						if strcmp(input.getAttribute('variable'), var_name)
							block = input.getElementsByTagName('block_name');
							block_name = char(block.item(0).getFirstChild.getData);
							return;
						end
					end
					outputs = nodes.item(idx_node).getElementsByTagName('Output');
					for idx_output=0:outputs.getLength-1
						output = outputs.item(idx_output);
						if strcmp(output.getAttribute('variable'), var_name)
							block = output.getElementsByTagName('block_name');
							block_name = char(block.item(0).getFirstChild.getData);
							return;
						end
					end
				end
			end
        end
        
    
	end
end
