------------------------
Pre-Processor (PP) for cocoSim
------------------------


------------------------
REQUIREMENTS
------------------------
- Matlab r2014b or newer
- Simulink
- Python

------------------------
INSTRUCTIONS
------------------------
To use PP which converts a Simulink model into a CoCoSim-friendly one, 
open Matlab and add the folder where the script pp.m is to the Matlab 
path (usually add 'pp' using the right click and the option 
'Add to path' then 'Selected Folders and subfolders'). 
Then go to the folder where is located the Simulink model you want to 
process (using cd or the Matlab browser) and type the following command :
pp('filename')

If the Simulink model needs the definition of constants in order to run, 
you have to give a .m file containing these values to PP  with 
the command :
pp('filename','constant_filename')

You have to give the complete name of the files, including the extension 
as follow :
pp('model.slx') or
pp('model.slx','model_constants.m')

PP will create :
- modelname_p.slx or .mdl file which contains the CoCoSim-friendly model in 
the same file format as the model processed.
- modelname_pp.mdl file which contains the CoCoSim-friendly model in the 
Matlab r2008b compatible file format, which is supported by CoCoSim.

------------------------
OPTIONS
------------------------
You can call PP with the 'verif' option which will create some
simulink models containing every block processed and the block generated by
PP side by side. Those models are stored in the "Verification"
folder. The command is :
pp('model.slx','model_constants.m','verif') or
pp('model.slx','','verif') if no constant file is required

------------------------
DETAILS
------------------------
PP needs to compile the model during its execution, if it lacks 
values of certain parameters for example, be aware that the preprocessing 
will fail.

Matlab r2014b is required because of its python capabilities.
If you want to use PP in an older version of Matlab, you can, but any 
call of the Python parser script will fail and you will get error messages 
in the console each time this python script is called.
That means that blocks needing parsing to be processed (fcn, gain and 
constants with calculation for example) won't be processed, nevertheless 
all other blocks will be processed normally.