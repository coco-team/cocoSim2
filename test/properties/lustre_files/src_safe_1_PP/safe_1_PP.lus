
node safe_1_PP_observer(
  safe_1_PP_observer_In1 : real; 
  safe_1_PP_observer_In2 : real; 
  safe_1_PP_observer_Output2 : real; 
  safe_1_PP_observer_Output1 : real)
returns (
  safe_1_PP_observer_Out1 : bool);
let
  safe_1_PP_observer_Out1 = ((((safe_1_PP_observer_Output1 >= safe_1_PP_observer_In1) or (safe_1_PP_observer_Output1 >= safe_1_PP_observer_In2)) and (safe_1_PP_observer_Output2 >= safe_1_PP_observer_In1)) and (safe_1_PP_observer_Output2 >= safe_1_PP_observer_In2));
tel;



node safe_1_PP_Abs_real(
  in : real)
returns (
  out : real);
let
  out =  (if (in >= 0.0) then in else (- in));
tel;



node safe_1_PP_safe_1_PP_observer(
  safe_1_PP_In1 : real; 
  safe_1_PP_In2 : real)
returns (
  safe_1_PP_Out1 : real; 
  safe_1_PP_Out2 : real);
var 
  safe_1_PP_observer_safe_1_PP_observer_Out1 : bool;
let
  safe_1_PP_Out1 =  (if (safe_1_PP_In1 >= safe_1_PP_In2) then safe_1_PP_In1 else safe_1_PP_In2);
  safe_1_PP_Out2 = safe_1_PP_Abs_real( (if (safe_1_PP_In1 >= safe_1_PP_In2) then safe_1_PP_In1 else safe_1_PP_In2));
  safe_1_PP_observer_safe_1_PP_observer_Out1 = safe_1_PP_observer(safe_1_PP_In1, safe_1_PP_In2, safe_1_PP_Out1, safe_1_PP_Out2);

  --%PROPERTY safe_1_PP_observer_safe_1_PP_observer_Out1;
tel;





